# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:13:45+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class ConfigIssue(BaseModel):
    config_file: Optional[str] = Field(None, title='Vulnerable configuration file name')
    issues: Optional[List[str]] = Field(None, title='List of detected issues')
    service_name: Optional[str] = Field(None, title='Affected network service name')
    suggestions: Optional[List[str]] = Field(
        None, title='List of suggestions to fix the issues'
    )


class CryptoKey(BaseModel):
    algorithm: Optional[str] = Field(None, title='Crypto algorithm name of the key')
    bits: Optional[int] = Field(None, title='Key length in bits')
    file_hash: Optional[str] = Field(None, title='SHA2 hash of the crypto key file')
    file_name: Optional[str] = Field(None, title='Crypto key file name')
    pem_type: Optional[str] = Field(
        None, title='Key type, e.g., RSAPrivateKey, ECPublicKey, etc'
    )


class DefaultAccount(BaseModel):
    gid: Optional[int] = Field(None, title='Group id of the account')
    hash_algorithm: Optional[str] = Field(
        None, title="Hash algorithm, '0': DES, '1': '5': SHA2, '2a': Blowfish"
    )
    home_dir: Optional[str] = Field(
        None, title='Path to the home folder of the account'
    )
    name: Optional[str] = Field(None, title='OS account name')
    pwd_hash: Optional[str] = Field(None, title='Password hash of the account')
    shell: Optional[str] = Field(None, title='Path to the shell binary of the account')
    uid: Optional[int] = Field(None, title='*nix user id of the account')


class DeviceFeatures(BaseModel):
    ftp_banner: Optional[str] = Field(
        '', title='FTP service banner(excluding status code, eg. 220)'
    )
    hostname: Optional[str] = Field('', title='Device hostname')
    http_response: Optional[str] = Field('', title='Raw response of the http service')
    https_response: Optional[str] = Field('', title='Raw response of the https service')
    nic_mac: Optional[str] = Field(
        '',
        title='MAC address of the device network interface in dash or dot separated format',
    )
    snmp_sysdescr: Optional[str] = Field(
        '', title='sysDescr OID string of the SNMP service'
    )
    snmp_sysoid: Optional[str] = Field(
        '', title='sysObjectID OID string of the SNMP service'
    )
    telnet_banner: Optional[str] = Field('', title='Telnet service banner')
    upnp_response: Optional[str] = Field('', title='UPnP service response')


class FirmwareInfo(BaseModel):
    download_url: Optional[str] = Field(
        None, title="Download url of the firmware file on vendor's site"
    )
    name: Optional[str] = Field(
        None, title='Title of the firmware file published by the device vendor'
    )
    release_date: Optional[str] = Field(None, title='Release date of the firmware file')
    sha2: Optional[str] = Field(None, title='Firmware file SHA2 hash')
    version: Optional[str] = Field(None, title='Published firmware file version')


class PublicKey(BaseModel):
    algorithm: Optional[str] = Field(None, title='Crypto algorithm name')
    bits: Optional[int] = Field(None, title='key length in bits')


class RiskSummary(BaseModel):
    client_tools_risk: Optional[str] = Field(
        None, title='Risk level of client tools such as busybox'
    )
    crypto_risk: Optional[str] = Field(None, title='Crypto libraries risk level')
    kernel_risk: Optional[str] = Field(None, title='Kernel risk level')
    net_services_risk: Optional[str] = Field(
        None,
        title="Qualitative risk level of device network services in the scale of 'Critical' to 'None'",
    )


class ValidationError(BaseModel):
    loc: List[str] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class Vulnerability(BaseModel):
    cve_id: Optional[str] = Field(None, title='CVE ID of the vulnerability')
    cvss: Optional[float] = Field(None, title='CVSS v3 score of the vulnerability')


class VulnerableComponent(BaseModel):
    category: Optional[str] = Field(
        None, title="Component category: 'UPnP Server', 'Web Server', etc"
    )
    cvss_max: Optional[float] = Field(
        None, title='Maximum CVSS score of the detected vulnerabilities'
    )
    name: Optional[str] = Field(
        None, title='Vulnerable component name, e.g., upnp, busybox, etc'
    )
    version: Optional[str] = Field(None, title='Vulnerable component version')
    vulnerabilities: Optional[List[Vulnerability]] = Field(
        None, title='List of component vulnerabilities'
    )


class WeakCert(BaseModel):
    file_hash: Optional[str] = Field(None, title='SHA2 hash of the certificate file')
    file_name: Optional[str] = Field(None, title='Certificate file name')
    sign_algorithm: Optional[str] = Field(
        None, title='Ceritifcate signing algorithm name, e.g., sha1'
    )
    subject_name: Optional[str] = Field(None, title='Certificate subject name')
    thumb_print: Optional[str] = Field(None, title='Certificate fingerprint')
    valid_from: Optional[str] = Field(None, title='Certificate validity start date')
    valid_to: Optional[str] = Field(None, title='Certificate expiry date')


class FirmwareFirmwareHashAccountsGetResponse(RootModel[List[DefaultAccount]]):
    root: List[DefaultAccount] = Field(
        ..., title='Response Firmware Accounts Firmware  Firmware Hash  Accounts Get'
    )


class FirmwareFirmwareHashConfigIssuesGetResponse(RootModel[List[ConfigIssue]]):
    root: List[ConfigIssue] = Field(
        ...,
        title='Response Firmware Config Issues Firmware  Firmware Hash  Config Issues Get',
    )


class FirmwareFirmwareHashPrivateKeysGetResponse(RootModel[List[CryptoKey]]):
    root: List[CryptoKey] = Field(
        ...,
        title='Response Firmware Private Keys Firmware  Firmware Hash  Private Keys Get',
    )


class FirmwareFirmwareHashWeakCertsGetResponse(RootModel[List[WeakCert]]):
    root: List[WeakCert] = Field(
        ...,
        title='Response Firmware Weak Certs Firmware  Firmware Hash  Weak Certs Get',
    )


class FirmwareFirmwareHashWeakKeysGetResponse(RootModel[List[CryptoKey]]):
    root: List[CryptoKey] = Field(
        ..., title='Response Firmware Weak Keys Firmware  Firmware Hash  Weak Keys Get'
    )


class DeviceInfo(BaseModel):
    cve_list: Optional[List[Vulnerability]] = Field(
        None, title='List of CVEs for the specified firmware version'
    )
    device_type: Optional[str] = Field(None, title='Device type,e.g., IP camera, etc')
    firmware_info: Optional[FirmwareInfo] = Field(
        None, title='Device firmware infromation, release date, download Url, etc'
    )
    firmware_version: Optional[str] = Field(None, title='Device firmware version')
    is_discontinued: Optional[bool] = Field(
        None, title='Device discontinued/retired indicator'
    )
    latest_firmware_info: Optional[FirmwareInfo] = Field(
        None, title='Latest firmware infromation of the device'
    )
    manufacturer: Optional[str] = Field(None, title='Device manufacturer name')
    model_name: Optional[str] = Field(None, title='Device model name')


class ExpiredCert(BaseModel):
    file_hash: Optional[str] = Field(None, title='SHA2 hash of the certificate file')
    file_name: Optional[str] = Field(None, title='Certificate file name')
    public_key: Optional[PublicKey] = Field(
        None, title='Public key infromation of the certificate'
    )
    subject_name: Optional[str] = Field(None, title='Certificate subject name')
    thumb_print: Optional[str] = Field(None, title='Certificate fingerprint')
    valid_from: Optional[str] = Field(None, title='Certificate validity start date')
    valid_to: Optional[str] = Field(None, title='Certificate expiry date')


class FirmwareRisk(BaseModel):
    risk_summary: Optional[RiskSummary] = Field(
        None,
        title='Qualitative risk levels of network services, crypto libraries, kernel and client tools in the analyzed firmware',
    )
    vulnerable_components: Optional[List[VulnerableComponent]] = Field(
        None, title='Details of vulnerable firmware components'
    )


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class FirmwareFirmwareHashExpiredCertsGetResponse(RootModel[List[ExpiredCert]]):
    root: List[ExpiredCert] = Field(
        ...,
        title='Response Firmware Expired Certs Firmware  Firmware Hash  Expired Certs Get',
    )
