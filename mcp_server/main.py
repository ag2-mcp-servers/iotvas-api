# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:13:45+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    DeviceFeatures,
    DeviceInfo,
    FirmwareFirmwareHashAccountsGetResponse,
    FirmwareFirmwareHashConfigIssuesGetResponse,
    FirmwareFirmwareHashExpiredCertsGetResponse,
    FirmwareFirmwareHashPrivateKeysGetResponse,
    FirmwareFirmwareHashWeakCertsGetResponse,
    FirmwareFirmwareHashWeakKeysGetResponse,
    FirmwareRisk,
    HTTPValidationError,
)

app = MCPProxy(
    description='IOTVAS API enables you to discover IoT/Connected devices in the network and provides \n    detailed real-time risk analysis, including firmware vulnerability analysis without requiring the user to upload the firmware file.\n    Please visit the [signup page](https://iotvas-api.firmalyzer.com/portal/signup) to create an API key.\n    IoTVAS API can be easily integrated with vulnerability scanning and network port scanner tools. For example,\n    we have also released the [IOTVAS NSE script](https://github.com/firmalyzer/iotvas-nmap) that turns the nmap port scanner \n    to a IoT/connected device discovery and real-time risk assessment tool. For more infromation on IoTVAS and other \n    solutions please visit [Firmalyzer web site](https://www.firmalyzer.com).',
    title='IoTVAS API',
    version='1.0',
    servers=[{'url': '/api/v1'}],
)


@app.post(
    '/device/detect',
    description=""" Use device service banners and mac address captured by your network port scanner, vulnerability assessment or asset discovery tools to detect device maker, model and firmware information """,
    tags=['device_security_evaluation', 'firmware_data_access'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def detect_device(body: DeviceFeatures):
    """
    Detect iot device by service banners and mac address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/firmware/{firmware_hash}/accounts',
    tags=['device_security_evaluation', 'firmware_data_access'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def get_accounts(firmware_hash: str):
    """
    Get default accounts and password hashes of a firmware
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/firmware/{firmware_hash}/config-issues',
    tags=['device_security_evaluation'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def get_config_issues(firmware_hash: str):
    """
    Get default OS configuration issues of a device firmware
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/firmware/{firmware_hash}/expired-certs',
    tags=['device_security_evaluation', 'firmware_data_access'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def get_expired_certs(firmware_hash: str):
    """
    Get expired digital certificates embedded in a device firmware
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/firmware/{firmware_hash}/private-keys',
    tags=['device_security_evaluation', 'firmware_data_access'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def get_private_keys(firmware_hash: str):
    """
    Get private crypto keys embedded in a device firmware
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/firmware/{firmware_hash}/risk',
    tags=['device_security_evaluation'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def get_risk(firmware_hash: str):
    """
    Get iot device firmware risk analysis
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/firmware/{firmware_hash}/weak-certs',
    tags=['device_security_evaluation', 'firmware_data_access'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def get_weak_certs(firmware_hash: str):
    """
    Get certificates with weak fingerprinting algorithms that are mebedded in a device firmware
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/firmware/{firmware_hash}/weak-keys',
    tags=['device_security_evaluation', 'firmware_data_access'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def get_weak_keys(firmware_hash: str):
    """
    Get weak crypto keys with short length
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
